---
#- Collect ios facts
#- Check if device uses flash or bootflash
#- Confirm device does not use the new IOS
#- Confirm new IOS image is valid for the device[Compare first 8 characters of file name
#- Delete atleast 1 unused .bin files.
#- Confirm enough space for new ios image upload
#- Upload IOS Image
- name: Collect IOS Facts
  ios_facts:
  register: f

- name: Check if flash or bootflash
  ios_command:
    commands: show file systems | inc flash

  register: a

- name: Create variable for memory space [Skip if bootflash is ABSENT]
  set_fact:
    memB: f.ansible_facts["ansible_net_filesystems_info"]["bootflash:"]["spacefree_kb"]
  when:
    - bf in a.stdout[0]

- name: Create variable for memory space. [Skipping if bootlash is PRESENT]
  set_fact:
    memF: f.ansible_facts["ansible_net_filesystems_info"]["flash:"]["spacefree_kb"]
  when:
    - bf not in a.stdout[0]

- name: Check newOS == oldOS [FAIL Out Device if newOS already used]
  assert:
    that:
      - newOS not in f.ansible_facts.ansible_net_image
    fail_msg: "newOS == OldOS. Stopping checks on the device"
    success_msg: "newOS != OldOS. Checks to continue"

- name: Check validity of new OS Image on Device [ Check first 8 characters of file name]
  assert:
    that:
      - zz in f.ansible_facts.ansible_net_image
    fail_msg: "FAIL- New OS Image invalid for device"
    success_msg: "PASS - New OS Image confirmed valid for device"

- name: Check current .bin files in Flash
  ios_command:
    commands: "show flash: | inc .bin"
  register: bin

- name: Set Variables
  set_fact:
    bin1: "{{ bin.stdout_lines[0][0] }}"
    bin2: "{{ bin.stdout_lines[0][1] }}"

#Deleting unused .bin image files
- name: Clean Up .bin images not in use
  block:
    - name: Clean Up unused Image number 1 [Skip if image in use]
      ios_command:
        commands:
          - command: "delete flash:{{ bin1.split()[-1]}}\n\n"

    - debug:
        msg: "Deleted .bin image = {{ bin1.split()[-1] }}"

  when:
    - bin1.split()[-1] not in f.ansible_facts.ansible_net_image

- name: Clean up .bin image number 2 not in use.
  block:
    - name: Clean up unused image number 2 [Skip if image in use]
      ios_command:
        commands:
          - command: "delete flash:{{ bin2.split()[-1]}}\n\n"

    - debug:
        msg: "Deleted .bin image = {{ bin2.split()[-1] }}"

  when:
    - bin2.split()[-1] not in f.ansible_facts.ansible_net_image


- name: Assert that available space > image size [Skipping if bootflash is ABSENT]
  assert:
    that:
      - "{{ memB }} > {{ size }}"
    fail_msg: "FAIL - Not enough space available for upload"
    success_msg: "PASS - Enough space available for upload"

  when:
    - bf in a.stdout[0]

- name: Assert that available space > image size [Skipping if bootflash is ABSENT]
  assert:
    that:
      - "{{ memF }} > {{ size }}"
    fail_msg: "FAIL - Not enough space available for upload"
    success_msg: "PASS - Enough space available for upload"

  when:
    - bf not in a.stdout[0]

- name: Activate CI SCP Server feature[Skipping if NO bootflash]
  ios_config:
    commands:
      - ip scp server enable

- name: Upload Image to device from images/.. directory [Skipping if bootflash is ABSENT]
  net_put:
    src: "/home/source/upload/{{ newOS }}"   #images folder to contain the image file.
    dest: "bootflash:{{ newOS }}"

  when:
    - bf in a.stdout[0]

- name: Upload Image to device from images/.. directory [Skip if bootflash is PRESENT]
  net_put:
    src: "/home/source/upload/{{ newOS }}"   #images folder to contain the image file.
    dest: "flash:{{ newOS }}"

  when:
   - bf not in a.stdout[0]

