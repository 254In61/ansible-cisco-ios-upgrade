---
- include_vars: modules/iosVars.yml

- name: OBTAIN IOS FACTS
  ios_facts:
  register: x

- name: Check if flash or bootflash
  ios_command:
    commands: show file systems | inc flash

  register: a

- name: Create variable for memory space [Skip if bootflash is ABSENT]
  set_fact:
    memB: x.ansible_facts["ansible_net_filesystems_info"]["bootflash:"]["spacefree_kb"]
  when:
    - ff in a.stdout[0]

- name: Create variable for memory space. [Skipping if bootlash is PRESENT]
  set_fact:
    memF: x.ansible_facts["ansible_net_filesystems_info"]["flash:"]["spacefree_kb"]
  when:
    - ff not in a.stdout[0]

- name: Print out device model
  debug:
    var: x.ansible_facts.ansible_net_model

- name: Print out current used IOS image
  debug:
    var: x.ansible_facts.ansible_net_image

- name: Check newOS == oldOS [FAIL Out Device if newOS already used]
  assert:
    that:
      - newOS not in x.ansible_facts.ansible_net_image
    fail_msg: "newOS == OldOS. Stopping checks on the device"
    success_msg: "newOS != OldOS. Checks to continue"

- name: Check validity of new OS Image on Device [ Check first 8 characters of file name]
  assert:
    that:
      - zz in x.ansible_facts.ansible_net_image
    fail_msg: "FAIL- New OS Image invalid for device"
    success_msg: "PASS - New OS Image confirmed valid for device"

- name: Activate CI SCP Server feature[Skipping if NO bootflash]
  ios_config:
    commands:
      - ip scp server enable


- name: Check space if with bootflash [Skip if bootflash is ABSENT ]
  block:
    - name: Print out available space [Skip if bootflash is ABSENT ]
      debug:
        var: "{{ memB }}"
    #This simply means you are getting the keys from the dictionaries
    - name: Assert that available space > image size [Skipping if bootflash is ABSENT]
      assert:
        that:
          - "{{ memB }} > {{ size }}"
        fail_msg: "FAIL - Not enough space available for upload"
        success_msg: "PASS - Enough space available for upload"

    - name: Upload Image to device from images/.. directory [Skipping if bootflash is ABSENT]
      connection: network_cli
      net_put:
        src: "images/{{ newOS }}"   #images folder to contain the image file.
        dest: "bootflash:{{ newOS }}"

    - name: Confirm copied file integrity . Compare MD5SUM [Skipping if bootflash is ABSENT]
      ios_command:
        commands:
          - verify /md5 "bootflash:{{ newOS }}" {{ md5 }}

  when:
    - ff in a.stdout[0]

- name: Check space if with flash [Skip if bootflash is PRESENT]
  block:
    - name: Print out available space [Skip if bootflash is PRESENT]
      debug:
        var: "{{ memF }}"

    - name: Assert that available space > image size [ Skipping if bootflash is PRESENT]
      assert:
        that:
          - "{{ memF }} > {{ size }}"

        fail_msg: "FAIL - Not enough space available for upload"
        success_msg: "PASS - Enough space available for upload"

    - name: Upload Image to device from images/.. directory [Skip if bootflash is PRESENT]
      net_put:
        src: "images/{{ newOS }}"   #images folder to contain the image file.
        dest: "flash:{{ newOS }}"

  when:
    - ff not in a.stdout[0]
