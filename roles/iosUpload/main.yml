---
- name: OBTAIN IOS FACTS
  ios_facts:
  register: x

- name: Print out device model
  debug:
    var: x.ansible_facts.ansible_net_model

- name: Print out current running IOS image
  debug:
    var: x.ansible_facts.ansible_net_image

- name: Set Facts
  set_fact:
    ff: "bootflash"
    oldOS: x.ansible_facts.ansible_net_image
    zz: newOS[0:6]
    yy: newOS

- name: Check newOS == oldOS ??
  assert:
    that:
      - "{{ yy }} not in {{ oldOS }}"
    fail_msg: "newOS == OldOS. Stopping checks on the device"
    success_msg: "newOS != OldOS. Checks to continue"

- name: Check validity of new OS Image on Device [ Check first 6 characters of file name]
  assert:
    that:
      - "{{ zz }} in {{ oldOS }}"
    fail_msg: "FAIL- New OS Image invalid for device"
    success_msg: "PASS - New OS Image confirmed valid for device"

- name: Check if flash or bootflash
  ios_command:
    commands: show file systems | inc flash

  register: a

- name: Check space if with bootflash [Skip if with NO bootflash ]
  block:
    - name: Print out available space [Skip if with NO bootflash ]
      debug:
        var: x.ansible_facts["ansible_net_filesystems_info"]["bootflash:"]["spacefree_kb"]
    #This simply means you are getting the keys from the dictionaries
    - name: Create variable for memory space.[Skipping if NO bootflash]
      set_fact:
        memB: x.ansible_facts["ansible_net_filesystems_info"]["bootflash:"]["spacefree_kb"]

    - name: Assert that available space > image size [Skipping if NO bootflash]
      assert:
        that:
          - "{{ memB }} > {{ size }}"
        fail_msg: "FAIL - Not enough space available for upload"
        success_msg: "PASS - Enough space available for upload"

    - name: Activate CI SCP Server feature[Skipping if NO bootflash]
      ios_config:
        commands:
          - ip scp server enable

    - name: Upload Image to device from images/.. directory [Skipping if NO bootflash]
      connection: network_cli
      net_put:
        src: "images/{{ newOS }}"   #images folder to contain the image file.
        dest: "bootflash:{{ newOS }}"

    - name: Confirm copied file integrity . Compare MD5SUM [Skipping if NO bootflash]
      ios_command:
        commands:
          - verify /md5 "bootflash:{{ newOS }}" {{ md5 }}

    - name: Set CI Boot Sequence to new Image [Skipping if NO bootflash]
      ios_command:
        commands:
           - no boot system
           - boot system flash "bootflash:/{{ newOS }}"

  when:
    - ff in a.stdout[0]

- name: Check space if with flash[Skip if with bootflash]
  block:
    - name: Print out available space [Skip if with bootflash]
      debug:
        var: x.ansible_facts["ansible_net_filesystems_info"]["flash:"]["spacefree_kb"]

    - name: Create variable for memory space. [Skipping if with bootflash]
      set_fact:
        memF: x.ansible_facts["ansible_net_filesystems_info"]["flash:"]["spacefree_kb"]

    - name: Assert that available space > image size [ Skipping if with bootflash ]
      assert:
        that:
          - "{{ memF }} > {{ size }}"

        fail_msg: "FAIL - Not enough space available for upload"
        success_msg: "PASS - Enough space available for upload"

    - name: Activate CI SCP Server feature [Skip if with bootflash]
      ios_config:
        commands:
          - ip scp server enable

    - name: Upload Image to device from images/.. directory [Skip if with bootflash]
      connection: network_cli
        net_put:
          src: "images/{{ newOS }}"   #images folder to contain the image file.
          dest: "flash:{{ newOS }}"

    - name: Confirm copied file integrity . Compare MD5SUM [Skip if with bootflash]
      ios_command:
        commands:
          - verify /md5 "flash:{{ newOS }}" {{ md5 }}

    - name: Set CI Boot Sequence to new Image [Skip if with bootflash]
      ios_command:
        commands:
          - no boot system
          - boot system flash "flash:/{{ newOS }}"

  when:
    - ff not in a.stdout[0]
